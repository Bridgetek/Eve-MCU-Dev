/**
 * @file ### EVE CLASS ###.h
 * @brief Support ### EVE DEV ###
 */
/*
 * ============================================================================
 * (C) Copyright,  Bridgetek Pte. Ltd.
 * ============================================================================
 *
 * This source code ("the Software") is provided by Bridgetek Pte Ltd
 * ("Bridgetek") subject to the licence terms set out
 * http://www.ftdichip.com/FTSourceCodeLicenceTerms.htm ("the Licence Terms").
 * You must read the Licence Terms before downloading or using the Software.
 * By installing or using the Software you agree to the Licence Terms. If you
 * do not agree to the Licence Terms then do not download or use the Software.
 *
 * Without prejudice to the Licence Terms, here is a summary of some of the key
 * terms of the Licence Terms (and in the event of any conflict between this
 * summary and the Licence Terms then the text of the Licence Terms will
 * prevail).
 *
 * The Software is provided "as is".
 * There are no warranties (or similar) in relation to the quality of the
 * Software. You use it at your own risk.
 * The Software should not be used in, or for, any medical device, system or
 * appliance. There are exclusions of Bridgetek liability for certain types of loss
 * such as: special loss or damage; incidental loss or damage; indirect or
 * consequential loss or damage; loss of income; loss of business; loss of
 * profits; loss of revenue; loss of contracts; business interruption; loss of
 * the use of money or anticipated savings; loss of information; loss of
 * opportunity; loss of goodwill or reputation; and/or loss of, damage to or
 * corruption of data.
 * There is a monetary cap on Bridgetek's liability.
 * The Software may have subsequently been amended by another user and then
 * distributed by that other user ("Adapted Software").  If so that user may
 * have additional licence terms that apply to those amendments. However, Bridgetek
 * has no liability in relation to those amendments.
 * ============================================================================
 */

#ifndef _BTEVE_H_
#define _BTEVE_H_

#include <stdint.h> // for Uint8/16/32 and Int8/16/32 data types
#include <stdarg.h>

#include "Arduino.h"

/* Clash with Arduino API */
#undef DISPLAY

#define EVE_API ### EVE API ###
#define EVE_SUB_API ### EVE SUB API ###

//@{
/** @brief Library Includes
 * It will be possible to make a library with these files.
 * Include EVE.h (which is the API as a C++ file which is part of this class.
 * Include HAL and MCU files as "C" files.
 */
//@{
extern "C" {
#include <EVE.h>
#include <HAL.h>
#include <MCU.h>
}
//@}

class ### EVE CLASS ###
{
  public:
    ### EVE CLASS ###(void);

  void setup(uint32_t panel);
  /* ### BEGIN API >= 5 ### */
  void setup(uint32_t panel, uint32_t ramg);
  /* ### END API ### */

  public:
  /* ### BEGIN API ### */
  /* ### END API ### */

  public:
    /* Font table structure */
    /* On EVE4 onwards this is called the Legacy Font Structure. */
    typedef struct
    {
        /* Width of each character font from 0 to 127 */
        uint8_t    FontWidth[128];
        /* Bitmap format of font - this is the same as the EVE_FORMAT_x, where x is L1, L2, L4 etc. */
        uint32_t    FontBitmapFormat;
        /* Font line stride in bytes */
        uint32_t    FontLineStride;
        /* Font width in pixels */
        uint32_t    FontWidthInPixels;
        /* Font height in pixels */
        uint32_t    FontHeightInPixels;
        /* Pointer to font graphics raw data */
        uint32_t    PointerToFontGraphicsData;
    } EVE_GPU_FONT_HEADER;

    /* ### BEGIN API >= 3 ### */
    /* On EVE4 onwards this is called the Extended Font Structure. */
    typedef struct
    {
        /* Signature of font structure - must be 0x0100AAFF */
        uint32_t    Signature;
        /* Total size of font block in bytes */
        uint32_t    Size;
        /* Bitmap format of font - this is the same as the EVE_FORMAT_x, where x is L1, L2, L4 etc. */
        uint32_t    FontBitmapFormat;
        /* Bitmap swizzle - as used in BITMAP_SWIZZLE command */
        uint32_t    FontBitmapSwizzle;
        /* Font layout width in bytes */
        uint32_t    FontLayoutWidth;
        /* Font layout height */
        uint32_t    FontLayoutHeight;
        /* Font width in pixels */
        uint32_t    FontWidthInPixels;
        /* Font height in pixels */
        uint32_t    FontHeightInPixels;
        /* Pointer to font graphics raw data */
        uint32_t    PointerToFontGraphicsData;
        /* Number of characters */
        uint32_t    FontNumberCharacters;
    } EVE_GPU_EXT_FONT_HEADER;
    /* ### END API ### */

    /* ### BEGIN API >= 5 ### */
    /* On EVE5 onwards this is called the Extended 2 Font Structure. */
    typedef struct
    {
        /* Signature of font structure - must be 0x0200AAFF */
        uint32_t    Signature;
        /* Total size of font block in bytes */
        uint32_t    Size;
        /* Bitmap format and flags of font */
        /* Format is the same as the EVE_FORMAT_x, where x is L1, L2, L4 etc. */
        /* Flags denotes binary and line break behaviour */
        uint32_t    FontBitmapFormat;
        /* Bitmap swizzle - as used in BITMAP_SWIZZLE command */
        uint32_t    FontBitmapSwizzle;
        /* Font layout width in bytes */
        uint32_t    FontLayoutWidth;
        /* Font layout height */
        uint32_t    FontLayoutHeight;
        /* Font width in pixels */
        uint32_t    FontWidthInPixels;
        /* Font height in pixels */
        uint32_t    FontHeightInPixels;
        /* Font padding and leading in pixels */
        uint32_t    FontPadLeadInPixels;
        /* Number of characters */
        uint32_t    FontNumberCharacters;
        /* Font midline and baseline in pixels */
        uint32_t    FontMidlineBaselineInPixels;
    } EVE_GPU_EXT2_FONT_HEADER;

    typedef struct
    {
        /* Pointer to font graphics raw data */
        uint32_t    PointerToFontGraphicsData;
        /* Width of font character */
        uint32_t    Width;
    } EVE_GPU_EXT2_CHAR_DESCRIPTOR;
    /* ### END API ### */
  
  private:
    void setpanel(uint32_t panel);
};

#endif    /* _BTEVE_H_ */
